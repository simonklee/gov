#!/bin/bash

function error {
    echo "ERR: $@" 1>&2
}

function fail {
    error "program terminated"
    exit 1
}

function update {
    local update=false
    [[ $1 == -update* ]] && update=true

    local deps=`go list -f '{{join .Deps "\n"}}' ./... |
        xargs go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}'`
    local cwd=`pwd`

    for pkg in ${deps}; do
        local dir="`go list -f '{{.Dir}}' ${pkg}`" || return 1

        # don't consider sub-packages
        if [[ ${dir} == ${cwd}* ]]; then
            if [[ ${dir} != ${cwd}/third_party* ]]; then
                continue
            fi

            if ! ${update} ; then
                continue
            fi

            # unless sub-package is a third_party pkg, then grab the real
            # package import path
            pkg="${pkg#*third_party/}" || return 1
        fi

        if [[ ${pkg} == "." ]]; then
            error "unexpected pkg name"
            return 1
        fi

        goven -copy -rewrite -prefix="third_party" ${pkg} || return 1

        # rewrite import of third_party which depend on each other
        ddeps=$(go list -f '{{join .Deps "\n"}}' ${pkg} \
            | xargs go list -f '{{if not .Standard}}{{.ImportPath}}{{end}}' ${pp#*third_party/})

        for ddep in ${ddeps}; do
            goven -copy=false -prefix="third_party" ${ddep} || return 1
        done
    done

    go fmt ./...
}

if [ -z "${GOPATH}" ]; then
    error "GOPATH must be set"
    exit 1
fi

update $@ || fail
